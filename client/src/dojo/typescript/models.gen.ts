
// Generated by dojo-bindgen on Sat, 7 Sep 2024 15:08:45 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<ReturnType<typeof defineContractComponents>>;



// Type definition for `dojo::model::layout::Layout` enum
export type Layout = { type: 'Fixed'; value: RecsType.NumberArray; } | { type: 'Struct'; value: RecsType.StringArray; } | { type: 'Tuple'; value: RecsType.StringArray; } | { type: 'Array'; value: RecsType.StringArray; } | { type: 'ByteArray'; } | { type: 'Enum'; value: RecsType.StringArray; };

export const LayoutDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `game::models::account::Account` struct
export interface Account {
    owner: BigInt;
    username: string;
    energy: Number;
    pvpEnergy: Number;
    crystals: Number;
    gems: Number;
    lastEnergyUpdateTimestamp: Number;
    lastPvpEnergyUpdateTimestamp: Number;
    runesCount: Number;
    heroesCount: Number;
    
}
export const AccountDefinition = {
    owner: RecsType.BigInt,
    username: RecsType.String,
    energy: RecsType.Number,
    pvpEnergy: RecsType.Number,
    crystals: RecsType.Number,
    gems: RecsType.Number,
    lastEnergyUpdateTimestamp: RecsType.Number,
    lastPvpEnergyUpdateTimestamp: RecsType.Number,
    runesCount: RecsType.Number,
    heroesCount: RecsType.Number,
    
};

// Type definition for `core::byte_array::ByteArray` struct
export interface ByteArray {
    data: String[];
    pending_word: BigInt;
    pending_word_len: Number;
    
}
export const ByteArrayDefinition = {
    data: RecsType.StringArray,
    pending_word: RecsType.BigInt,
    pending_word_len: RecsType.Number,
    
};

// Type definition for `dojo::model::layout::FieldLayout` struct
export interface FieldLayout {
    selector: BigInt;
    layout: Layout;
    
}
export const FieldLayoutDefinition = {
    selector: RecsType.BigInt,
    layout: LayoutDefinition,
    
};


// Type definition for `game::models::storage::arena::arenaAccount::ArenaAccount` struct
export interface ArenaAccount {
    owner: BigInt;
    rank: Number;
    lastClaimedRewards: Number;
    teamSize: Number;
    
}
export const ArenaAccountDefinition = {
    owner: RecsType.BigInt,
    rank: RecsType.Number,
    lastClaimedRewards: RecsType.Number,
    teamSize: RecsType.Number,
    
};


// Type definition for `game::models::storage::battles::arenaBattleStorage::ArenaBattleStorage` struct
export interface ArenaBattleStorage {
    owner: BigInt;
    enemyOwner: BigInt;
    
}
export const ArenaBattleStorageDefinition = {
    owner: RecsType.BigInt,
    enemyOwner: RecsType.BigInt,
    
};


// Type definition for `game::models::storage::arena::arenaConfig::ArenaConfig` struct
export interface ArenaConfig {
    id: Number;
    enemyRangesByRankLength: Number;
    gemsRewardsLength: Number;
    
}
export const ArenaConfigDefinition = {
    id: RecsType.Number,
    enemyRangesByRankLength: RecsType.Number,
    gemsRewardsLength: RecsType.Number,
    
};


// Type definition for `game::models::storage::arena::arenaCurrentRankIndex::ArenaCurrentRankIndex` struct
export interface ArenaCurrentRankIndex {
    id: Number;
    currentRankIndex: Number;
    
}
export const ArenaCurrentRankIndexDefinition = {
    id: RecsType.Number,
    currentRankIndex: RecsType.Number,
    
};


// Type definition for `game::models::storage::arena::arenaTeam::ArenaTeam` struct
export interface ArenaTeam {
    owner: BigInt;
    index: Number;
    heroIndex: Number;
    
}
export const ArenaTeamDefinition = {
    owner: RecsType.BigInt,
    index: RecsType.Number,
    heroIndex: RecsType.Number,
    
};


// Type definition for `game::models::storage::baseHero::BaseHero` struct
export interface BaseHero {
    heroName: BigInt;
    statistics: Statistics;
    skillsCount: Number;
    
}
export const StatisticsDefinition = {
    health: RecsType.Number,
    attack: RecsType.Number,
    defense: RecsType.Number,
    speed: RecsType.Number,
    criticalRate: RecsType.Number,
    criticalDamage: RecsType.Number,
    
};

export const BaseHeroDefinition = {
    heroName: RecsType.BigInt,
    statistics: StatisticsDefinition,
    skillsCount: RecsType.Number,
    
};

// Type definition for `game::models::storage::statistics::Statistics` struct
export interface Statistics {
    health: Number;
    attack: Number;
    defense: Number;
    speed: Number;
    criticalRate: Number;
    criticalDamage: Number;
    
}



// Type definition for `game::models::storage::battles::battleStorage::BattleStorage` struct
export interface BattleStorage {
    owner: BigInt;
    map: Number;
    level: Number;
    entitiesCount: Number;
    aliveEntitiesCount: Number;
    isBattleOver: Boolean;
    isWaitingForPlayerAction: Boolean;
    
}
export const BattleStorageDefinition = {
    owner: RecsType.BigInt,
    map: RecsType.Number,
    level: RecsType.Number,
    entitiesCount: RecsType.Number,
    aliveEntitiesCount: RecsType.Number,
    isBattleOver: RecsType.Boolean,
    isWaitingForPlayerAction: RecsType.Boolean,
    
};


// Type definition for `game::models::hero::rune::RuneRarity` enum
export type RuneRarity = { type: 'Common'; } | { type: 'Uncommon'; } | { type: 'Rare'; } | { type: 'Epic'; } | { type: 'Legendary'; };

export const RuneRarityDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `game::models::hero::rune::RuneStatistic` enum
export type RuneStatistic = { type: 'Health'; } | { type: 'Attack'; } | { type: 'Defense'; } | { type: 'Speed'; };

export const RuneStatisticDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `game::models::storage::statistics::bonusRuneStatistics::BonusRuneStatistics` struct
export interface BonusRuneStatistics {
    statistic: RuneStatistic;
    rarity: RuneRarity;
    isPercent: Boolean;
    value: Number;
    
}
export const BonusRuneStatisticsDefinition = {
    statistic: RuneStatisticDefinition,
    rarity: RuneRarityDefinition,
    isPercent: RecsType.Boolean,
    value: RecsType.Number,
    
};


// Type definition for `game::models::storage::arena::enemyRanges::EnemyRanges` struct
export interface EnemyRanges {
    index: Number;
    minRank: Number;
    range: Number;
    
}
export const EnemyRangesDefinition = {
    index: RecsType.Number,
    minRank: RecsType.Number,
    range: RecsType.Number,
    
};


// Type definition for `game::models::battle::entity::AllyOrEnemy` enum
export type AllyOrEnemy = { type: 'Ally'; } | { type: 'Enemy'; };

export const AllyOrEnemyDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `game::models::battle::entity::cooldowns::Cooldowns` struct
export interface Cooldowns {
    skill1: Number;
    skill2: Number;
    
}
export const CooldownsDefinition = {
    skill1: RecsType.Number,
    skill2: RecsType.Number,
    
};

// Type definition for `game::models::battle::entity::Entity` struct
export interface Entity {
    index: Number;
    heroId: Number;
    name: BigInt;
    turnBar: TurnBar;
    statistics: Statistics;
    cooldowns: Cooldowns;
    stunOnTurnProc: StunOnTurnProc;
    allyOrEnemy: AllyOrEnemy;
    
}
export const TurnBarDefinition = {
    entityIndex: RecsType.Number,
    speed: RecsType.Number,
    turnbar: RecsType.Number,
    incrementStep: RecsType.Number,
    decimals: RecsType.Number,
    
};

export const StunOnTurnProcDefinition = {
    duration: RecsType.Number,
    stunned: RecsType.Boolean,
    
};

export const EntityDefinition = {
    index: RecsType.Number,
    heroId: RecsType.Number,
    name: RecsType.BigInt,
    turnBar: TurnBarDefinition,
    statistics: StatisticsDefinition,
    cooldowns: CooldownsDefinition,
    stunOnTurnProc: StunOnTurnProcDefinition,
    allyOrEnemy: AllyOrEnemyDefinition,
    
};

// Type definition for `game::models::storage::battles::entityStorage::EntityStorage` struct
export interface EntityStorage {
    owner: BigInt;
    map: Number;
    entityIndex: Number;
    entityVal: Entity;
    healthOnTurnProcCount: Number;
    
}
export const EntityStorageDefinition = {
    owner: RecsType.BigInt,
    map: RecsType.Number,
    entityIndex: RecsType.Number,
    entityVal: EntityDefinition,
    healthOnTurnProcCount: RecsType.Number,
    
};

// Type definition for `game::utils::signedIntegers::i64::i64` struct
export interface I64 {
    mag: Number;
    sign: Boolean;
    
}
export const I64Definition = {
    mag: RecsType.Number,
    sign: RecsType.Boolean,
    
};

// Type definition for `game::models::battle::entity::statistics::statModifier::StatModifier` struct
export interface StatModifier {
    value: Number;
    duration: Number;
    
}
export const StatModifierDefinition = {
    value: RecsType.Number,
    duration: RecsType.Number,
    
};

// Type definition for `game::models::battle::entity::statistics::statistic::Statistic` struct
export interface Statistic {
    value: Number;
    malus: StatModifier;
    bonus: StatModifier;
    
}
export const StatisticDefinition = {
    value: RecsType.Number,
    malus: StatModifierDefinition,
    bonus: StatModifierDefinition,
    
};

// Type definition for `game::models::battle::entity::stunOnTurnProc::StunOnTurnProc` struct
export interface StunOnTurnProc {
    duration: Number;
    stunned: Boolean;
    
}

// Type definition for `game::models::battle::entity::turnBar::TurnBar` struct
export interface TurnBar {
    entityIndex: Number;
    speed: Number;
    turnbar: Number;
    incrementStep: Number;
    decimals: Number;
    
}


// Type definition for `game::models::storage::arena::gemsRewards::GemsRewards` struct
export interface GemsRewards {
    index: Number;
    minRank: Number;
    gems: Number;
    
}
export const GemsRewardsDefinition = {
    index: RecsType.Number,
    minRank: RecsType.Number,
    gems: RecsType.Number,
    
};


// Type definition for `game::models::battle::entity::healthOnTurnProc::DamageOrHealEnum` enum
export type DamageOrHealEnum = { type: 'Damage'; } | { type: 'Heal'; };

export const DamageOrHealEnumDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `game::models::battle::entity::healthOnTurnProc::HealthOnTurnProc` struct
export interface HealthOnTurnProc {
    entityIndex: Number;
    value: Number;
    duration: Number;
    damageOrHeal: DamageOrHealEnum;
    
}
export const HealthOnTurnProcDefinition = {
    entityIndex: RecsType.Number,
    value: RecsType.Number,
    duration: RecsType.Number,
    damageOrHeal: DamageOrHealEnumDefinition,
    
};

// Type definition for `game::models::storage::battles::healthOnTurnProcStorage::HealthOnTurnProcStorage` struct
export interface HealthOnTurnProcStorage {
    owner: BigInt;
    map: Number;
    entityIndex: Number;
    index: Number;
    healthOnTurnProc: HealthOnTurnProc;
    
}
export const HealthOnTurnProcStorageDefinition = {
    owner: RecsType.BigInt,
    map: RecsType.Number,
    entityIndex: RecsType.Number,
    index: RecsType.Number,
    healthOnTurnProc: HealthOnTurnProcDefinition,
    
};


// Type definition for `game::models::hero::equippedRunes::EquippedRunes` struct
export interface EquippedRunes {
    isFirstRuneEquipped: Boolean;
    first: Number;
    isSecondRuneEquipped: Boolean;
    second: Number;
    isThirdRuneEquipped: Boolean;
    third: Number;
    isFourthRuneEquipped: Boolean;
    fourth: Number;
    isFifthRuneEquipped: Boolean;
    fifth: Number;
    isSixthRuneEquipped: Boolean;
    sixth: Number;
    
}
export const EquippedRunesDefinition = {
    isFirstRuneEquipped: RecsType.Boolean,
    first: RecsType.Number,
    isSecondRuneEquipped: RecsType.Boolean,
    second: RecsType.Number,
    isThirdRuneEquipped: RecsType.Boolean,
    third: RecsType.Number,
    isFourthRuneEquipped: RecsType.Boolean,
    fourth: RecsType.Number,
    isFifthRuneEquipped: RecsType.Boolean,
    fifth: RecsType.Number,
    isSixthRuneEquipped: RecsType.Boolean,
    sixth: RecsType.Number,
    
};

// Type definition for `game::models::hero::Hero` struct
export interface Hero {
    id: Number;
    name: string;
    level: Number;
    rank: Number;
    experience: Number;
    runes: EquippedRunes;
    
}
export const HeroDefinition = {
    id: RecsType.Number,
    name: RecsType.String,
    level: RecsType.Number,
    rank: RecsType.Number,
    experience: RecsType.Number,
    runes: EquippedRunesDefinition,
    
};

// Type definition for `game::models::account::heroes::Heroes` struct
export interface Heroes {
    owner: BigInt;
    index: Number;
    hero: Hero;
    
}
export const HeroesDefinition = {
    owner: RecsType.BigInt,
    index: RecsType.Number,
    hero: HeroDefinition,
    
};


// Type definition for `game::models::storage::level::levelEnemy::LevelEnemy` struct
export interface LevelEnemy {
    map: Number;
    level: Number;
    index: Number;
    hero: Hero;
    
}
export const LevelEnemyDefinition = {
    map: RecsType.Number,
    level: RecsType.Number,
    index: RecsType.Number,
    hero: HeroDefinition,
    
};


// Type definition for `game::models::storage::level::levelInfos::LevelInfos` struct
export interface LevelInfos {
    map: Number;
    level: Number;
    energyCost: Number;
    enemiesCount: Number;
    
}
export const LevelInfosDefinition = {
    map: RecsType.Number,
    level: RecsType.Number,
    energyCost: RecsType.Number,
    enemiesCount: RecsType.Number,
    
};


// Type definition for `game::models::storage::mapProgress::MapProgress` struct
export interface MapProgress {
    owner: BigInt;
    map: Number;
    level: Number;
    
}
export const MapProgressDefinition = {
    owner: RecsType.BigInt,
    map: RecsType.Number,
    level: RecsType.Number,
    
};


// Type definition for `game::models::storage::statistics::runeStatistics::RuneStatistics` struct
export interface RuneStatistics {
    statistic: RuneStatistic;
    rarity: RuneRarity;
    isPercent: Boolean;
    value: Number;
    
}
export const RuneStatisticsDefinition = {
    statistic: RuneStatisticDefinition,
    rarity: RuneRarityDefinition,
    isPercent: RecsType.Boolean,
    value: RecsType.Number,
    
};


// Type definition for `game::models::hero::rune::RuneType` enum
export type RuneType = { type: 'First'; } | { type: 'Second'; } | { type: 'Third'; } | { type: 'Fourth'; } | { type: 'Fifth'; } | { type: 'Sixth'; };

export const RuneTypeDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `game::models::hero::rune::Rune` struct
export interface Rune {
    id: Number;
    statistic: RuneStatistic;
    isPercent: Boolean;
    rank: Number;
    rarity: RuneRarity;
    runeType: RuneType;
    isEquipped: Boolean;
    heroEquipped: Number;
    rank4Bonus: RuneBonus;
    rank8Bonus: RuneBonus;
    rank12Bonus: RuneBonus;
    rank16Bonus: RuneBonus;
    
}
export const RuneBonusDefinition = {
    statistic: RuneStatisticDefinition,
    isPercent: RecsType.Boolean,
    
};
export const RuneDefinition = {
    id: RecsType.Number,
    statistic: RuneStatisticDefinition,
    isPercent: RecsType.Boolean,
    rank: RecsType.Number,
    rarity: RecsType.String,
    runeType: RecsType.String,
    isEquipped: RecsType.Boolean,
    heroEquipped: RecsType.Number,
    rank4Bonus: RuneBonusDefinition,
    rank8Bonus: RuneBonusDefinition,
    rank12Bonus: RuneBonusDefinition,
    rank16Bonus: RuneBonusDefinition,
    
};

// Type definition for `game::models::hero::rune::runeBonus::RuneBonus` struct
export interface RuneBonus {
    statistic: RuneStatistic;
    isPercent: Boolean;
    
}


// Type definition for `game::models::account::runes::Runes` struct
export interface Runes {
    owner: BigInt;
    index: Number;
    rune: Rune;
    
}
export const RunesDefinition = {
    owner: RecsType.BigInt,
    index: RecsType.Number,
    rune: RuneDefinition,
    
};


// Type definition for `game::models::battle::entity::skill::buff::BuffType` enum
export type BuffType = { type: 'SpeedUp'; } | { type: 'SpeedDown'; } | { type: 'AttackUp'; } | { type: 'AttackDown'; } | { type: 'DefenseUp'; } | { type: 'DefenseDown'; } | { type: 'Poison'; } | { type: 'Regen'; } | { type: 'Stun'; };

export const BuffTypeDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `game::models::battle::entity::skill::buff::Buff` struct
export interface Buff {
    buffType: BuffType;
    value: Number;
    duration: Number;
    target: Boolean;
    aoe: Boolean;
    self: Boolean;
    
}
export const BuffDefinition = {
    buffType: BuffTypeDefinition,
    value: RecsType.Number,
    duration: RecsType.Number,
    target: RecsType.Boolean,
    aoe: RecsType.Boolean,
    self: RecsType.Boolean,
    
};

// Type definition for `game::models::storage::skill::skillBuff::SkillBuff` struct
export interface SkillBuff {
    skillName: BigInt;
    index: Number;
    buff: Buff;
    
}
export const SkillBuffDefinition = {
    skillName: RecsType.BigInt,
    index: RecsType.Number,
    buff: BuffDefinition,
    
};


// Type definition for `game::models::battle::entity::skill::damage::DamageType` enum
export type DamageType = { type: 'Flat'; } | { type: 'Percent'; };

export const DamageTypeDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `game::models::battle::entity::skill::heal::HealType` enum
export type HealType = { type: 'Flat'; } | { type: 'Percent'; };

export const HealTypeDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `game::models::battle::entity::skill::TargetType` enum
export type TargetType = { type: 'Ally'; } | { type: 'Enemy'; };

export const TargetTypeDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `game::models::battle::entity::skill::damage::Damage` struct
export interface Damage {
    value: Number;
    target: Boolean;
    aoe: Boolean;
    self: Boolean;
    damageType: DamageType;
    
}
export const DamageDefinition = {
    value: RecsType.Number,
    target: RecsType.Boolean,
    aoe: RecsType.Boolean,
    self: RecsType.Boolean,
    damageType: DamageTypeDefinition,
    
};

// Type definition for `game::models::battle::entity::skill::heal::Heal` struct
export interface Heal {
    value: Number;
    target: Boolean;
    aoe: Boolean;
    self: Boolean;
    healType: HealType;
    
}
export const HealDefinition = {
    value: RecsType.Number,
    target: RecsType.Boolean,
    aoe: RecsType.Boolean,
    self: RecsType.Boolean,
    healType: HealTypeDefinition,
    
};

// Type definition for `game::models::storage::skill::skillInfos::SkillInfos` struct
export interface SkillInfos {
    name: BigInt;
    cooldown: Number;
    damage: Damage;
    heal: Heal;
    targetType: TargetType;
    accuracy: Number;
    buffsCount: Number;
    
}
export const SkillInfosDefinition = {
    name: RecsType.BigInt,
    cooldown: RecsType.Number,
    damage: DamageDefinition,
    heal: HealDefinition,
    targetType: TargetTypeDefinition,
    accuracy: RecsType.Number,
    buffsCount: RecsType.Number,
    
};


// Type definition for `game::models::storage::skill::skillNameSet::SkillNameSet` struct
export interface SkillNameSet {
    heroName: BigInt;
    index: Number;
    skill: BigInt;
    
}
export const SkillNameSetDefinition = {
    heroName: RecsType.BigInt,
    index: RecsType.Number,
    skill: RecsType.BigInt,
    
};


// Type definition for `game::models::storage::battles::turnTimelineStorage::TurnTimelineStorage` struct
export interface TurnTimelineStorage {
    owner: BigInt;
    map: Number;
    index: Number;
    entityIndex: Number;
    
}
export const TurnTimelineStorageDefinition = {
    owner: RecsType.BigInt,
    map: RecsType.Number,
    index: RecsType.Number,
    entityIndex: RecsType.Number,
    
};


export function defineContractComponents(world: World) {
    return {

        // Model definition for `game::models::account::Account` model
        Account: (() => {
            return defineComponent(
                world,
                {
                    owner: RecsType.BigInt,
                    username: RecsType.String,
                    energy: RecsType.Number,
                    pvpEnergy: RecsType.Number,
                    crystals: RecsType.Number,
                    gems: RecsType.Number,
                    lastEnergyUpdateTimestamp: RecsType.Number,
                    lastPvpEnergyUpdateTimestamp: RecsType.Number,
                    runesCount: RecsType.Number,
                    heroesCount: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "Account",
                        types: ["ContractAddress", "felt252", "u16", "u16", "u32", "u32", "u64", "u64", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::arena::arenaAccount::ArenaAccount` model
        ArenaAccount: (() => {
            return defineComponent(
                world,
                {
                    owner: RecsType.BigInt,
                    rank: RecsType.Number,
                    lastClaimedRewards: RecsType.Number,
                    teamSize: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "ArenaAccount",
                        types: ["ContractAddress", "u64", "u64", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::battles::arenaBattleStorage::ArenaBattleStorage` model
        ArenaBattleStorage: (() => {
            return defineComponent(
                world,
                {
                    owner: RecsType.BigInt,
                    enemyOwner: RecsType.BigInt,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "ArenaBattleStorage",
                        types: ["ContractAddress", "ContractAddress"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::arena::arenaConfig::ArenaConfig` model
        ArenaConfig: (() => {
            return defineComponent(
                world,
                {
                    id: RecsType.Number,
                    enemyRangesByRankLength: RecsType.Number,
                    gemsRewardsLength: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "ArenaConfig",
                        types: ["u8", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::arena::arenaCurrentRankIndex::ArenaCurrentRankIndex` model
        ArenaCurrentRankIndex: (() => {
            return defineComponent(
                world,
                {
                    id: RecsType.Number,
                    currentRankIndex: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "ArenaCurrentRankIndex",
                        types: ["u8", "u64"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::arena::arenaTeam::ArenaTeam` model
        ArenaTeam: (() => {
            return defineComponent(
                world,
                {
                    owner: RecsType.BigInt,
                    index: RecsType.Number,
                    heroIndex: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "ArenaTeam",
                        types: ["ContractAddress", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::baseHero::BaseHero` model
        BaseHero: (() => {
            return defineComponent(
                world,
                {
                    heroName: RecsType.String,
                    statistics: StatisticsDefinition,
                    skillsCount: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "BaseHero",
                        types: ["felt252", "u8"],
                        customTypes: ["Statistics"],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::battles::battleStorage::BattleStorage` model
        BattleStorage: (() => {
            return defineComponent(
                world,
                {
                    owner: RecsType.BigInt,
                    map: RecsType.Number,
                    level: RecsType.Number,
                    entitiesCount: RecsType.Number,
                    aliveEntitiesCount: RecsType.Number,
                    isBattleOver: RecsType.Boolean,
                    isWaitingForPlayerAction: RecsType.Boolean,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "BattleStorage",
                        types: ["ContractAddress", "u16", "u16", "u32", "u32", "bool", "bool"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::statistics::bonusRuneStatistics::BonusRuneStatistics` model
        BonusRuneStatistics: (() => {
            return defineComponent(
                world,
                {
                    statistic: RecsType.String,
                    rarity: RecsType.String,
                    isPercent: RecsType.Boolean,
                    value: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "BonusRuneStatistics",
                        types: ["RuneStatistic", "RuneRarity", "bool", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::arena::enemyRanges::EnemyRanges` model
        EnemyRanges: (() => {
            return defineComponent(
                world,
                {
                    index: RecsType.Number,
                    minRank: RecsType.Number,
                    range: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "EnemyRanges",
                        types: ["u32", "u64", "u64"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::battles::entityStorage::EntityStorage` model
        EntityStorage: (() => {
            return defineComponent(
                world,
                {
                    owner: RecsType.BigInt,
                    map: RecsType.Number,
                    entityIndex: RecsType.Number,
                    entityVal: EntityDefinition,
                    healthOnTurnProcCount: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "EntityStorage",
                        types: ["ContractAddress", "u16", "u32", "u32"],
                        customTypes: ["Entity"],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::arena::gemsRewards::GemsRewards` model
        GemsRewards: (() => {
            return defineComponent(
                world,
                {
                    index: RecsType.Number,
                    minRank: RecsType.Number,
                    gems: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "GemsRewards",
                        types: ["u32", "u64", "u64"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::battles::healthOnTurnProcStorage::HealthOnTurnProcStorage` model
        HealthOnTurnProcStorage: (() => {
            return defineComponent(
                world,
                {
                    owner: RecsType.BigInt,
                    map: RecsType.Number,
                    entityIndex: RecsType.Number,
                    index: RecsType.Number,
                    healthOnTurnProc: HealthOnTurnProcDefinition,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "HealthOnTurnProcStorage",
                        types: ["ContractAddress", "u16", "u32", "u32"],
                        customTypes: ["HealthOnTurnProc"],
                    },
                }
            );
        })(),

        // Model definition for `game::models::account::heroes::Heroes` model
        Heroes: (() => {
            return defineComponent(
                world,
                {
                    owner: RecsType.BigInt,
                    index: RecsType.Number,
                    hero: HeroDefinition,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "Heroes",
                        types: ["ContractAddress", "u32"],
                        customTypes: ["Hero"],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::level::levelEnemy::LevelEnemy` model
        LevelEnemy: (() => {
            return defineComponent(
                world,
                {
                    map: RecsType.Number,
                    level: RecsType.Number,
                    index: RecsType.Number,
                    hero: HeroDefinition,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "LevelEnemy",
                        types: ["u16", "u16", "u16"],
                        customTypes: ["Hero"],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::level::levelInfos::LevelInfos` model
        LevelInfos: (() => {
            return defineComponent(
                world,
                {
                    map: RecsType.Number,
                    level: RecsType.Number,
                    energyCost: RecsType.Number,
                    enemiesCount: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "LevelInfos",
                        types: ["u16", "u16", "u16", "u16"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::mapProgress::MapProgress` model
        MapProgress: (() => {
            return defineComponent(
                world,
                {
                    owner: RecsType.BigInt,
                    map: RecsType.Number,
                    level: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "MapProgress",
                        types: ["ContractAddress", "u16", "u16"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::statistics::runeStatistics::RuneStatistics` model
        RuneStatistics: (() => {
            return defineComponent(
                world,
                {
                    statistic: RecsType.String,
                    rarity: RecsType.String,
                    isPercent: RecsType.Boolean,
                    value: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "RuneStatistics",
                        types: ["RuneStatistic", "RuneRarity", "bool", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `game::models::account::runes::Runes` model
        Runes: (() => {
            return defineComponent(
                world,
                {
                    owner: RecsType.BigInt,
                    index: RecsType.Number,
                    rune: RuneDefinition,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "Runes",
                        types: ["ContractAddress", "u32"],
                        customTypes: ["Rune"],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::skill::skillBuff::SkillBuff` model
        SkillBuff: (() => {
            return defineComponent(
                world,
                {
                    skillName: RecsType.BigInt,
                    index: RecsType.Number,
                    buff: BuffDefinition,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "SkillBuff",
                        types: ["felt252", "u16"],
                        customTypes: ["Buff"],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::skill::skillInfos::SkillInfos` model
        SkillInfos: (() => {
            return defineComponent(
                world,
                {
                    name: RecsType.BigInt,
                    cooldown: RecsType.Number,
                    damage: DamageDefinition,
                    heal: HealDefinition,
                    targetType: RecsType.String,
                    accuracy: RecsType.Number,
                    buffsCount: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "SkillInfos",
                        types: ["felt252", "u8", "TargetType", "u16", "u16"],
                        customTypes: ["Damage", "Heal"],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::skill::skillNameSet::SkillNameSet` model
        SkillNameSet: (() => {
            return defineComponent(
                world,
                {
                    heroName: RecsType.BigInt,
                    index: RecsType.Number,
                    skill: RecsType.BigInt,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "SkillNameSet",
                        types: ["felt252", "u8", "felt252"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `game::models::storage::battles::turnTimelineStorage::TurnTimelineStorage` model
        TurnTimelineStorage: (() => {
            return defineComponent(
                world,
                {
                    owner: RecsType.BigInt,
                    map: RecsType.Number,
                    index: RecsType.Number,
                    entityIndex: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "game",
                        name: "TurnTimelineStorage",
                        types: ["ContractAddress", "u16", "u16", "u16"],
                        customTypes: [],
                    },
                }
            );
        })(),
    };
}
